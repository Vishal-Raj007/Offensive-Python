#!/usr/bin/enc python3

import argparse
import subprocess
import random
import re


def get_args():
    parser = argparse.ArgumentParser(description="Welcome to MAC Changer for linux.")
    parser.add_argument("-i", "--interface", dest="interface", type=str,
                        help="Interface to change MAC Address")
    parser.add_argument("-m", "--mac", dest="new_mac",
                        help="Set new MAC Address XX:XX:XX:XX:XX:XX")
    parser.add_argument("-r", "--random", action="store_true",
                        help="Set fully random MAC")
    parser.add_argument("-s", "--show", action="store_true",
                        help="Print the current MAC Address and exit")
    parser.add_argument("-g", "--generate", action="store_true",
                        help="To generate a MAC Address and exit")
    parsed_args = parser.parse_args()
    if not parsed_args.interface:
        if parsed_args.generate:
            pass
        else:
            parser.error("[-] Please Specify an interface")
    return parsed_args


def generate_mac():  # Generate a new mac address.
    hexdigits = []
    for x in range(6):
        a = random.randint(0, 255)
        hexadecimal = '%02x' % a
        hexdigits.append(hexadecimal)
    random_mac = (':'.join(hexdigits))
    return random_mac


def change_mac(interface, new_mac):  # Change the mac address.
    print("[+] Changing MAC Address for " + interface + " to " + new_mac)
    print()
    subprocess.run(["ifconfig", interface, "down"])
    subprocess.run(["ifconfig", interface, "hw", "ether", new_mac])
    subprocess.run(["ifconfig", interface, "up"])


def get_mac(interface):  # Get mac address by ifconfig command.
    ifconfig_result = subprocess.check_output(["ifconfig", interface])
    mac_result = re.search(r"\w\w:\w\w:\w\w:\w\w:\w\w:\w\w", ifconfig_result.decode())
    return mac_result.group(0)


if __name__ == "__main__":
    options = get_args()

    # if -i and -m is provided.
    if options.interface and options.new_mac:
        mul_address = re.search(r"11:\w\w:\w\w:\w\w:\w\w:\w\w", options.new_mac)
        brod_address = re.search(r"ff:\w\w:\w\w:\w\w:\w\w:\w\w", options.new_mac)  # user can only provide unicode
        # address otherwise he gets SIOCSIFHWADDR Error. To handle this we have to check the user input(mac address).
        try:
            if options.new_mac == mul_address.group(0):
                print("[-] Please use a Uni-cast MAC Address")
                exit(0)
            elif options.new_mac == brod_address.group(0):
                print("[-] Please use a Uni-cast MAC Address")
                exit(0)
        except AttributeError as msg:
            change_mac(options.interface, options.new_mac)
        if get_mac(options.interface) == options.new_mac:
            print("[+] MAC Address was successfully changed to: " + get_mac(options.interface))
        else:
            print("[-] MAC Address did not get change.")
            exit(0)

    # if -i and -r is provided.
    elif options.interface and options.random:
        rand_mac = generate_mac()
        change_mac(options.interface, rand_mac)
        if rand_mac == get_mac(options.interface):
            print("[+] MAC Address was successfully changed to: " + get_mac(options.interface))
        else:
            print("[-] MAC Address did not get change.")
            exit(0)

    # if -i and -s is provided.
    elif options.show and options.interface:
        print("Current MAC Address of " + options.interface + " :- " + get_mac(options.interface))

    # if -g is provided.
    elif options.generate:
        print("New MAC Address: " + generate_mac())
        exit(0)
